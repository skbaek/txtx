%------------------------------------------------------------------------------
% File     : SWW410-1 : TPTP v7.3.0. Released v5.2.0.
% Domain   : Software Verification
% Problem  : Verification Condition generated by Smallfoot
% Version  : Especial.
% English  : This is one of the verification conditions that were gathered
%            from the output of Smallfoot when checking assertions on list
%            manipulating programs from its own benchmark suite.

% Refs     : [BCO06] Berdine et al. (2006), Smallfoot: Modular Automatic As
%          : [RN11]  Rybalchenko & Navarro Perez (2011), Separation Logic +
%          : [Nav11] Navarro Perez (2011), Email to Geoff Sutcliffe
% Source   : [Nav11]
% Names    : smallfoot-vc42 [Nav11]

% Status   : Unsatisfiable
% Rating   : 0.35 v7.3.0, 0.25 v7.1.0, 0.17 v7.0.0, 0.27 v6.4.0, 0.33 v6.3.0, 0.27 v6.2.0, 0.40 v6.1.0, 0.43 v6.0.0, 0.40 v5.5.0, 0.50 v5.4.0, 0.45 v5.3.0, 0.50 v5.2.0
% Syntax   : Number of clauses     :   17 (   3 non-Horn;  10 unit;  15 RR)
%            Number of atoms       :   27 (  12 equality)
%            Maximal clause size   :    3 (   2 average)
%            Number of predicates  :    2 (   0 propositional; 1-2 arity)
%            Number of functors    :    8 (   5 constant; 0-2 arity)
%            Number of variables   :   38 (   9 singleton)
%            Maximal term depth    :    5 (   2 average)
% SPC      : CNF_UNS_RFO_SEQ_NHN

% Comments :
%          : tptp2X 
%------------------------------------------------------------------------------
cnf(associative_commutative,axiom,
    ( sep(S,sep(T,Sigma)) = sep(T,sep(S,Sigma)) )).

cnf(normalization,axiom,
    ( sep(lseg(X,X),Sigma) = Sigma )).

cnf(wellformedness_1,axiom,
    ( ~ heap(sep(next(nil,Y),Sigma)) )).

cnf(wellformedness_2,axiom,
    ( ~ heap(sep(lseg(nil,Y),Sigma)) | Y = nil )).

cnf(wellformedness_3,axiom,
    ( ~ heap(sep(next(X,Y),sep(next(X,Z),Sigma))) )).

cnf(wellformedness_4,axiom,
    ( ~ heap(sep(next(X,Y),sep(lseg(X,Z),Sigma))) | X = Z )).

cnf(wellformedness_5,axiom,
    ( ~ heap(sep(lseg(X,Y),sep(lseg(X,Z),Sigma))) | X = Y | X = Z )).

cnf(unfolding_2,axiom,
    ( ~ heap(sep(next(X,Y),sep(lseg(Y,Z),Sigma))) | X = Y | heap(sep(lseg(X,Z),Sigma)) )).

cnf(unfolding_3,axiom,
    ( ~ heap(sep(lseg(X,Y),sep(lseg(Y,nil),Sigma))) | heap(sep(lseg(X,nil),Sigma)) )).

cnf(unfolding_4,axiom,
    ( ~ heap(sep(lseg(X,Y),sep(lseg(Y,Z),sep(next(Z,W),Sigma)))) | heap(sep(lseg(X,Z),sep(next(Z,W),Sigma))) )).

cnf(unfolding_5,axiom,
    ( ~ heap(sep(lseg(X,Y),sep(lseg(Y,Z),sep(lseg(Z,W),Sigma)))) | Z = W | heap(sep(lseg(X,Z),sep(lseg(Z,W),Sigma))) )).

cnf(premise_1,hypothesis,
    ( nil != x1 )).

cnf(premise_2,hypothesis,
    ( nil != x2 )).

cnf(premise_3,hypothesis,
    ( x1 != x3 )).

cnf(premise_4,hypothesis,
    ( x3 != x2 )).

cnf(premise_5,hypothesis,
    ( heap(sep(lseg(x2,x1),sep(lseg(x3,nil),sep(next(x1,x3),emp)))) )).

cnf(conclusion_1,negated_conjecture,
    ( ~ heap(sep(lseg(x3,nil),sep(lseg(x2,x3),emp))) )).
%------------------------------------------------------------------------------
