%------------------------------------------------------------------------------
% File     : GRP123-6.003 : TPTP v7.3.0. Released v1.2.0.
% Domain   : Group Theory (Quasigroups)
% Problem  : (3,2,1) conjugate orthogonality
% Version  : [Sla93] axioms.
%            Theorem formulation : Uses a second group.
% English  : If ab=xy and a*b = x*y then a=x and b=y, where c*b=a iff ab=c
%            Generate the multiplication table for the specified quasi-
%            group with 3 elements.

% Refs     : [FSB93] Fujita et al. (1993), Automatic Generation of Some Res
%          : [Sla93] Slaney (1993), Email to G. Sutcliffe
%          : [SFS95] Slaney et al. (1995), Automated Reasoning and Exhausti
% Source   : [Sla93]
% Names    : QG1a [Sla93]

% Status   : Unsatisfiable
% Rating   : 0.00 v2.1.0
% Syntax   : Number of clauses     :   20 (   2 non-Horn;  11 unit;  18 RR)
%            Number of atoms       :   42 (   0 equality)
%            Maximal clause size   :    5 (   2 average)
%            Number of predicates  :    4 (   0 propositional; 1-3 arity)
%            Number of functors    :    3 (   3 constant; 0-0 arity)
%            Number of variables   :   34 (   0 singleton)
%            Maximal term depth    :    1 (   1 average)
% SPC      : CNF_UNS_EPR_NEQ_NHN

% Comments : [SFS93]'s axiomatization has been modified for this.
%          : Substitution axioms are not needed, as any positive equality
%            literals should resolve on negative ones directly.
%          : tptp2X: -f tptp -s3 GRP123-6.g
%          : tptp2X 
%------------------------------------------------------------------------------
cnf(element_1,axiom,
    ( group_element(e_1) )).

cnf(element_2,axiom,
    ( group_element(e_2) )).

cnf(element_3,axiom,
    ( group_element(e_3) )).

cnf(e_1_is_not_e_2,axiom,
    ( ~ equalish(e_1,e_2) )).

cnf(e_1_is_not_e_3,axiom,
    ( ~ equalish(e_1,e_3) )).

cnf(e_2_is_not_e_1,axiom,
    ( ~ equalish(e_2,e_1) )).

cnf(e_2_is_not_e_3,axiom,
    ( ~ equalish(e_2,e_3) )).

cnf(e_3_is_not_e_1,axiom,
    ( ~ equalish(e_3,e_1) )).

cnf(e_3_is_not_e_2,axiom,
    ( ~ equalish(e_3,e_2) )).

cnf(product1_total_function1,axiom,
    ( ~ group_element(X) | ~ group_element(Y) | product1(X,Y,e_1) | product1(X,Y,e_2) | product1(X,Y,e_3) )).

cnf(product1_total_function2,axiom,
    ( ~ product1(X,Y,W) | ~ product1(X,Y,Z) | equalish(W,Z) )).

cnf(product1_right_cancellation,axiom,
    ( ~ product1(X,W,Y) | ~ product1(X,Z,Y) | equalish(W,Z) )).

cnf(product1_left_cancellation,axiom,
    ( ~ product1(W,Y,X) | ~ product1(Z,Y,X) | equalish(W,Z) )).

cnf(product1_idempotence,axiom,
    ( product1(X,X,X) )).

cnf(product2_total_function1,axiom,
    ( ~ group_element(X) | ~ group_element(Y) | product2(X,Y,e_1) | product2(X,Y,e_2) | product2(X,Y,e_3) )).

cnf(product2_total_function2,axiom,
    ( ~ product2(X,Y,W) | ~ product2(X,Y,Z) | equalish(W,Z) )).

cnf(product2_right_cancellation,axiom,
    ( ~ product2(X,W,Y) | ~ product2(X,Z,Y) | equalish(W,Z) )).

cnf(product2_left_cancellation,axiom,
    ( ~ product2(W,Y,X) | ~ product2(Z,Y,X) | equalish(W,Z) )).

cnf(product2_idempotence,axiom,
    ( product2(X,X,X) )).

cnf(qg1a,negated_conjecture,
    ( ~ product1(X,Y,Z1) | ~ product1(Z1,Y,Z2) | product2(Z2,X,Y) )).
%------------------------------------------------------------------------------
